{"version":3,"sources":["events.js","Draggable.js","ElementCache.js","Handler.js","Sortable.js","App.js","index.js","array.js"],"names":["preventDefault","e","transitions","grasp","moveIntoPlace","settleIntoPlace","Draggable","element","props","startPosition","currentPosition","direction","left","offsetLeft","top","offsetTop","height","offsetHeight","width","offsetWidth","_window$getComputedSt","window","getComputedStyle","marginTop","marginBottom","marginLeft","marginRight","initialCenter","dimensions","Math","max","parseInt","displacement","absoluteCenter","this","margins","bottom","right","position","console","log","_this$displacement","Object","slicedToArray","x","y","style","transform","concat","hasMoved","willChange","zIndex","transition","classList","add","dragClassName","raised","_element$getBoundingC","getBoundingClientRect","keyframes","animate","duration","easing","finished","target","eventName","event","Promise","resolve","reject","addEventListener","handler","_ref","removeEventListener","requestAnimationFrame","remove","release","_release","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","stop","_x","_x2","apply","arguments","elementCache","elements","map","transitionDelay","Element","get","index","find","count","length","removeAt","splice","resetStyles","forEach","_ref2","getSelected","filter","_ref3","selected","getSelectedIndexes","selectedIndexes","_ref4","indexOf","push","print","table","item","innerText","translateY","_element$translateY","select","deselect","toggle","Handler","container","draggable","draggableIndex","placeholderIndex","rafId","isHolding","scrollable","parentNode","children","Array","from","ElementCache","scrollableRect","scrollableVisibleTop","windowScrollY","pageYOffset","document","documentElement","scrollTop","body","clearTimeout","undefined","setTimeout","move","overflowY","repeatUntilNextTouchMove","_getScrollValue","targetRect","bottomOffset","min","innerHeight","topOffset","maxScrollTop","scrollHeight","clientHeight","offset","round","getScrollValue","_getScrollValue2","scrollOffset","newPositionY","prevPositionY","_draggable","_draggable$absoluteCe","centerY","shift","cancelAnimationFrame","_ref$translateY","prevent","unshift","indexes","toIndex","finalize","Sortable","_useState","useState","_useState2","setHandler","_useState3","_useState4","started","setStarted","_useState5","_useState6","usingTouch","setUsingTouch","containerRef","useRef","start","current","onGrasp","touches","clientX","clientY","Drag","onDrag","end","result","onDrop","useEffect","events","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","react_default","createElement","assign","onPointerDown","pointerType","onContextMenu","className","ref","defaultProps","generateItems","toConsumableArray","keys","k","ReactDOM","render","items","setItems","array","removedElements","_","includes","remainingElements","multiMove","key","getElementById"],"mappings":"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","file":"static/js/main.6a3a9b02.chunk.js","sourcesContent":["export function preventDefault(e) { e.preventDefault() }\r\nexport function stopPropagation(e) { e.stopPropagation() }\r\n\r\nexport function fireAndForget(target, eventName) {\r\n    return new Promise((resolve, reject) => {\r\n        const handler = ({ target }) => {\r\n            target.removeEventListener(eventName, handler, false);\r\n            resolve();\r\n        }\r\n        target.addEventListener(eventName, handler, false);\r\n    })\r\n}\r\n","import './Draggable.css';\r\nimport { fireAndForget } from './events';\r\nimport 'web-animations-js/web-animations.min';\r\n\r\nconst transitions = {\r\n    grasp: 'box-shadow .2s ease-in-out, background-color .2s ease-in-out',\r\n    moveIntoPlace: 'transform .2s ease-in-out',\r\n    settleIntoPlace: 'box-shadow .2s ease-in-out, background-color .2s ease-in-out'\r\n}\r\n\r\nexport default function Draggable(element, props) {\r\n\r\n    let startPosition = null;\r\n    let currentPosition = null;\r\n    let direction = null;\r\n\r\n    const { offsetLeft: left, offsetTop: top, offsetHeight: height, offsetWidth: width } = element;\r\n    const { marginTop, marginBottom, marginLeft, marginRight } = window.getComputedStyle(element);\r\n\r\n    const initialCenter = [left + width / 2, top + height / 2];\r\n    const dimensions = {\r\n        width: width + Math.max(parseInt(marginLeft), parseInt(marginRight)),\r\n        height: height + Math.max(parseInt(marginTop), parseInt(marginBottom)),\r\n    }\r\n\r\n    return {\r\n\r\n        get element() { return element },\r\n\r\n        get direction() { return direction },\r\n\r\n        get displacement() {\r\n            return [\r\n                currentPosition[0] - startPosition[0],\r\n                currentPosition[1] - startPosition[1],\r\n            ]\r\n        },\r\n\r\n        get dimensions() { return dimensions },\r\n\r\n        get absoluteCenter() {\r\n            return [initialCenter[0] + this.displacement[0], initialCenter[1] + this.displacement[1]];\r\n        },\r\n\r\n        get margins() {\r\n            return {\r\n                top: parseInt(marginTop),\r\n                bottom: parseInt(marginBottom),\r\n                left: parseInt(marginLeft),\r\n                right: parseInt(marginRight),\r\n            }\r\n        },\r\n        // get absoluteCenter() {\r\n        //     const { left, top, height, width } = element.getBoundingClientRect();\r\n        //     return [left + width / 2, top + height / 2];\r\n        //     // return [element.offsetLeft + this.dimensions.width / 2, element.offsetTop + this.dimensions.height / 2];\r\n        // },\r\n\r\n        set position(position) {\r\n            if (currentPosition) {\r\n                console.log(currentPosition[1], position[1]);\r\n                if (position[1] < currentPosition[1])\r\n                    direction = 'up';\r\n                else\r\n                    direction = 'down';\r\n            }\r\n            currentPosition = position;\r\n            if (!startPosition)\r\n                startPosition = currentPosition;\r\n            const [x, y] = this.displacement;\r\n            element.style.transform = `translate(${x}px,${y}px)`;\r\n        },\r\n\r\n        get position() { return currentPosition },\r\n\r\n        get hasMoved() { return startPosition !== currentPosition },\r\n\r\n        grasp() {\r\n            element.style.willChange = 'transform';\r\n            element.style.zIndex = 999;\r\n            // element.style.pointerEvents = 'none';\r\n            element.style.position = 'relative';\r\n            element.style.transition = transitions.grasp;\r\n            element.classList.add(props.dragClassName);\r\n            props.raised && element.classList.add('shadow');\r\n        },\r\n\r\n        moveIntoPlace(x, y) {\r\n            // return new Promise(resolve => {\r\n            const { left, top } = element.getBoundingClientRect();\r\n            const keyframes = [\r\n                { transform: `translate(${left - x - this.margins.left}px,${top - y}px)` },\r\n                { transform: `translate(${0}px,${0}px)` },\r\n            ];\r\n            const animation = element.animate(keyframes, {\r\n                duration: 200,\r\n                easing: 'ease-in-out',\r\n            });\r\n            // animation.onfinish = () => {\r\n            //     // The animation does not preserve its end state ->\r\n            //     //  update the styles directly to reflect final state.\r\n            //     // element.style.transition = null;\r\n            //     element.style.transform = `translate(${0}px,${0}px)`;\r\n            //     // resolve();\r\n            // }\r\n            // });\r\n            // Not supported in Chrome yet: (polyfill available but above Promise is simpler)\r\n            return animation.finished;\r\n        },\r\n\r\n        settleIntoPlace() {\r\n            const event = fireAndForget(element, \"transitionend\");\r\n            requestAnimationFrame(() => {\r\n                element.classList.remove(props.dragClassName);\r\n                element.classList.remove('shadow');\r\n                element.style.transition = transitions.settleIntoPlace;\r\n            });\r\n            return event;\r\n        },\r\n\r\n        async release(x, y) {\r\n            await this.moveIntoPlace(x, y);\r\n            // await this.settleIntoPlace();\r\n            element.style.zIndex = null;\r\n            // element.style.transition = null;\r\n            element.style.transform = null;\r\n        }\r\n    }\r\n}\r\n","const transitions = {\r\n    grasp: 'box-shadow .2s ease-in-out, background-color .2s ease-in-out',\r\n    moveIntoPlace: 'transform .2s ease-in-out',\r\n    settleIntoPlace: 'box-shadow .2s ease-in-out, background-color .2s ease-in-out'\r\n}\r\n\r\n\r\nexport default function elementCache(elements, props) {\r\n\r\n    const elementCache = elements.map(element => {\r\n        element.style.transition = transitions.settleIntoPlace;\r\n        element.style.transitionDelay = '1s';\r\n        element.classList.remove(props.dragClassName);\r\n        element.classList.remove('shadow');\r\n        return new Element(element)\r\n    });\r\n\r\n    return {\r\n\r\n        get: index => elementCache[index],\r\n\r\n        find: element => elementCache.find(({ element: cachedElement }) => cachedElement === element),\r\n\r\n        get count() { return elementCache.length },\r\n\r\n        removeAt(index) { elementCache.splice(index, 1) },\r\n\r\n        resetStyles() {\r\n            elementCache.forEach(({ element }) => {\r\n                element.style.transition = null;\r\n                element.style.transform = null;\r\n            });\r\n        },\r\n\r\n        getSelected: () => elementCache.filter(({ selected }) => selected),\r\n\r\n        getSelectedIndexes() {\r\n            let selectedIndexes = [];\r\n            elementCache.forEach(({ element, selected }) => {\r\n                const index = elements.indexOf(element);\r\n                selected && index > -1 && selectedIndexes.push(index)\r\n            });\r\n            return selectedIndexes;\r\n        },\r\n\r\n        print() {\r\n            console.table(elementCache.map(element => {\r\n                const { element: { innerText: item }, top, translateY } = element;\r\n                return { item, top, translateY }\r\n            }));\r\n        }\r\n    }\r\n\r\n    function Element(element) {\r\n        const { offsetTop, offsetHeight: height, translateY = 0 } = element;\r\n        return {\r\n            element,\r\n            offsetTop,\r\n            height,\r\n            translateY,\r\n            selected: null,\r\n            get top() { return this.offsetTop + this.translateY },\r\n            select() {\r\n                this.selected = true;\r\n                element.style.transition = transitions.grasp;\r\n                element.classList.add(props.dragClassName);\r\n                props.raised && element.classList.add('shadow');\r\n\r\n            },\r\n            deselect() {\r\n                this.selected = false;\r\n                element.style.transition = transitions.settleIntoPlace;\r\n                element.classList.remove(props.dragClassName);\r\n                element.classList.remove('shadow');\r\n\r\n            },\r\n            toggle() {\r\n                if (this.selected)\r\n                    this.deselect();\r\n                else\r\n                    this.select();\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Draggable from './Draggable';\r\nimport ElementCache from './ElementCache';\r\n\r\nexport default function (container, props) {\r\n\r\n    const scrollable = container.parentNode;\r\n    let draggable;\r\n    let draggableIndex;\r\n    let placeholderIndex;\r\n    const children = Array.from(container.children);\r\n    let elementCache = new ElementCache(children, props);\r\n    let rafId;\r\n    let isHolding;\r\n\r\n    const scrollableRect = scrollable.getBoundingClientRect();\r\n\r\n    const scrollableVisibleTop = function () {\r\n        const windowScrollY = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\r\n        return container.offsetTop - windowScrollY - scrollable.scrollTop\r\n    }\r\n\r\n    return {\r\n\r\n        grasp(element) {\r\n\r\n            if (element === container) return;\r\n\r\n            if (!elementCache.getSelected().length) {\r\n                isHolding = setTimeout(() => {\r\n                    isHolding = undefined;\r\n                    const cachedElement = elementCache.find(element);\r\n                    cachedElement.toggle();\r\n                    draggable = undefined;\r\n                }, 300);\r\n                return;\r\n            }\r\n            else {\r\n                clearTimeout(isHolding);\r\n                const cachedElement = elementCache.find(element);\r\n                cachedElement.toggle();\r\n                draggable = undefined;\r\n                return;\r\n            }\r\n        },\r\n\r\n        move(element, x, y) {\r\n            console.log(element);\r\n            if (element === container || element === scrollable) return;\r\n            if (isHolding) {\r\n                clearTimeout(isHolding);\r\n                return;\r\n            }\r\n\r\n            if (!draggable) {\r\n                draggable = new Draggable(element, props);\r\n\r\n                draggableIndex = children.indexOf(draggable.element);\r\n                placeholderIndex = draggableIndex;\r\n\r\n                elementCache.removeAt(draggableIndex);\r\n\r\n                disableScrolling();\r\n\r\n                draggable.grasp();\r\n            }\r\n            // if (prevent()) return;\r\n\r\n            rafId = requestAnimationFrame(repeatUntilNextTouchMove);\r\n            let prevPositionY = null;\r\n            // Allows auto scroll to continue when draggable is held in same place\r\n            function repeatUntilNextTouchMove() {\r\n\r\n                if (!draggable) return;\r\n                const [scrollTop, scrollOffset] = getScrollValue();\r\n                const newPositionY = y + scrollTop;\r\n\r\n                if (newPositionY === prevPositionY) return;\r\n\r\n                scrollable.scrollTop = scrollTop;\r\n                draggable.position = [x, newPositionY];\r\n                prevPositionY = newPositionY;\r\n\r\n                const { direction, dimensions: { height }, absoluteCenter: [, centerY] } = draggable;\r\n                // console.log(direction, draggable.position[1], scrollTop);\r\n\r\n                console.log(centerY);\r\n                if (direction === 'down') {\r\n                    for (placeholderIndex; placeholderIndex < elementCache.count; placeholderIndex++) {\r\n                        const element = elementCache.get(placeholderIndex);\r\n                        if (element.top > centerY) break;\r\n                        console.log(direction, element.element.innerText);\r\n                        element.translateY -= height;\r\n                        shift(element);\r\n                    }\r\n                }\r\n                else if (direction === 'up') {\r\n                    for (placeholderIndex; placeholderIndex > 0; placeholderIndex--) {\r\n                        const element = elementCache.get(placeholderIndex - 1);\r\n                        const bottom = element.top + element.height;\r\n                        if (bottom < centerY) break;\r\n                        console.log(direction, element.element.innerText);\r\n                        element.translateY += height;\r\n                        shift(element);\r\n                    }\r\n                }\r\n                if (placeholderIndex <= 0 || placeholderIndex >= elementCache.count || scrollOffset === 0) {\r\n                    cancelAnimationFrame(rafId);\r\n                }\r\n                else {\r\n                    rafId = requestAnimationFrame(repeatUntilNextTouchMove);\r\n                }\r\n\r\n            }\r\n\r\n            function shift({ element, translateY = 0 }) {\r\n                // element.style.willChange = 'transform';\r\n                // requestAnimationFrame(() => {\r\n                element.style['transition'] = 'transform .2s ease-in-out';\r\n                element.style['transform'] = `translateY(${translateY}px)`;\r\n                //     element.style.willChange = null;\r\n                // });\r\n            }\r\n\r\n        },\r\n\r\n        release() {\r\n\r\n            if (prevent()) return null;\r\n\r\n            // if (!draggable.hasMoved) return null;\r\n\r\n            enableScrolling();\r\n\r\n            // elementCache does not contain the draggable element => placeholderIndex will be out-of-range when dropping\r\n            // in last position. In this case, get the new y position using offsetTop + offseHeight of the last element in\r\n            // container.children (i.e. the bottom of the ). Bit of a hack I know.\r\n            // Note: Was using only container.children, offsetTop (which works for last as well) but the draggable sometimes\r\n            // jumoed on drop.\r\n\r\n            const element = elementCache.get(placeholderIndex) || {\r\n                top: container.children[placeholderIndex].offsetTop + container.children[placeholderIndex].offsetHeight\r\n            }\r\n\r\n            let selectedIndexes = elementCache.getSelectedIndexes();\r\n\r\n            selectedIndexes.unshift(draggableIndex);\r\n            console.log(`moving ${selectedIndexes} to ${placeholderIndex}`);\r\n\r\n\r\n            try { return { indexes: selectedIndexes, toIndex: placeholderIndex } }\r\n\r\n            // Do the drop animation after reordering\r\n            finally {\r\n\r\n                finalize();\r\n\r\n                async function finalize() {\r\n                    draggable.release(0, element.top - draggable.dimensions.height + scrollableVisibleTop());\r\n                    elementCache.resetStyles();\r\n                    // const done = new Promise((resolve, reject) => {\r\n                    //     elementCache.getSelected().forEach(element => element.select());\r\n                    //     setTimeout(() => elementCache.getSelected().forEach(element => element.deselect()), 1000)\r\n                    //     resolve();\r\n                    // });\r\n                    // await done;\r\n                    draggable = undefined;\r\n                }\r\n            }\r\n\r\n        },\r\n    }\r\n\r\n    function disableScrolling() {\r\n        scrollable.style.overflowY = 'hidden';\r\n        // scrollable.style.touchAction = 'none';\r\n        // scrollable.addEventListener('touchmove', preventDefault);\r\n    }\r\n\r\n    function enableScrolling() {\r\n        scrollable.style.overflowY = 'scroll';\r\n        // scrollable.style.touchAction = 'pan-y';\r\n        // scrollable.removeEventListener('touchmove', preventDefault);\r\n    }\r\n\r\n    function prevent() {\r\n\r\n        if (isHolding) {\r\n            clearTimeout(isHolding);\r\n            isHolding = undefined;\r\n            draggable = undefined;\r\n        }\r\n\r\n        if (!draggable) return true;\r\n\r\n        cancelAnimationFrame(rafId);\r\n\r\n        return false;\r\n    }\r\n\r\n    function getScrollValue() {\r\n\r\n        const triggerOffset = 80;\r\n        const speedMultiplier = 0.125;\r\n\r\n        // const scrollableRect = scrollable.getBoundingClientRect();\r\n        const targetRect = draggable.element.getBoundingClientRect();\r\n        const bottomOffset = Math.min(scrollableRect.bottom, window.innerHeight) - targetRect.bottom;\r\n        const topOffset = targetRect.top - Math.max(scrollableRect.top, 0);\r\n        const maxScrollTop = scrollable.scrollHeight - Math.min(scrollable.clientHeight, window.innerHeight);\r\n\r\n        let offset = 0;\r\n        if (bottomOffset < triggerOffset)\r\n            offset = Math.min(triggerOffset, triggerOffset - bottomOffset);\r\n        else if (topOffset < triggerOffset)\r\n            offset = Math.max(-triggerOffset, topOffset - triggerOffset);\r\n\r\n        const top = Math.max(0, Math.min(maxScrollTop, Math.round(scrollable.scrollTop + offset * speedMultiplier)));\r\n\r\n        return [top, offset];\r\n    }\r\n\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Handler from './Handler';\r\nimport { preventDefault } from './events';\r\n\r\n//------------------------------------------------------------------------------\r\n\r\nexport default function Sortable(props) {\r\n\r\n    let [handler, setHandler] = useState();\r\n    let [started, setStarted] = useState(false);\r\n    let [usingTouch, setUsingTouch] = useState(true);\r\n\r\n    const containerRef = useRef();\r\n\r\n    useEffect(() => {\r\n        console.log('new Handler!!');\r\n        setHandler(new Handler(containerRef.current, props));\r\n    }, [props.children]);\r\n\r\n    useEffect(() => {\r\n        if (!usingTouch && started)\r\n            document.body.addEventListener(\"mousemove\", move);\r\n        else\r\n            document.body.removeEventListener(\"mousemove\", move);\r\n        return () => {\r\n            document.body.removeEventListener(\"mousemove\", move);\r\n        };\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (usingTouch && started)\r\n            document.body.addEventListener(\"touchmove\", move);\r\n        else\r\n            document.body.removeEventListener(\"touchmove\", move);\r\n        return () => {\r\n            document.body.removeEventListener(\"touchmove\", move);\r\n        };\r\n    });\r\n\r\n    function handlePointerDown(e) {\r\n        if (e.pointerType === 'touch')\r\n            setUsingTouch(true);\r\n        else\r\n            setUsingTouch(false);\r\n    }\r\n\r\n    function start(e) {\r\n        setStarted(true);\r\n        if (e.target.parentNode !== containerRef.current) return;\r\n        handler.grasp(e.target);\r\n        props.onGrasp && props.onGrasp();\r\n    }\r\n\r\n    function move(e) {\r\n        if (usingTouch)\r\n            handler.move(e.target, e.touches[0].clientX, e.touches[0].clientY);\r\n        else\r\n            handler.move(e.target, e.clientX, e.clientY);\r\n\r\n        props.Drag && props.onDrag();\r\n    }\r\n\r\n    function end(e) {\r\n        const result = handler.release();\r\n        setStarted(false);\r\n        result && props.onDrop && props.onDrop(result);\r\n    }\r\n\r\n    let events = {};\r\n\r\n    if (handler) {\r\n        if (usingTouch) events = {\r\n            onTouchStart: start,\r\n            // onTouchMove: move,\r\n            onTouchEnd: end,\r\n        }\r\n        else events = {\r\n            onMouseDown: start,\r\n            // onMouseMove: started ? move : null,\r\n            onMouseUp: end,\r\n            // onMouseLeave:  end,\r\n        }\r\n    }\r\n\r\n    return (\r\n        //\r\n        // Notes:\r\n        //\r\n        // 1. The draggable is positioned relatively. In order for it to not be cut-off when dragged\r\n        // beyond the container edges requires overflow-x: visible on the container. But it's not\r\n        // possible to have overflow visible on one axis and allow the other axis to scroll: the\r\n        // visible axis will be overidden with overflow: auto (google it!).\r\n        // The solution is to wrap the container with overflow-x: visible in a scrollable div as\r\n        // below.\r\n        // Positioning the draggable absolutely allows it to remain visible no matter where it is\r\n        // but will close the placeholder when grasped. It also requires its size to be tweaked\r\n        // on grasp as it loses its container padding.\r\n        //\r\n        // 2. The event listeners are attached to the wrapper (not the container) as the mousemove\r\n        // events do not fire when the draggable is outside the container (and dragged fast so that\r\n        // the mouse leaves the draggable). I.e. the draggable freezes until the mouse is moved over\r\n        // it again. The container fits the list contenet snuggly whereas the wrapper is the full width\r\n        // of the page -> events on the wrapper continue to fire.\r\n        // Update: Now adds mousemove listener to the document so others can go either on container or\r\n        // wrapper. Leave on wrapper for now.\r\n\r\n        <div style={{ overflowY: 'scroll' }}\r\n            onPointerDown={handlePointerDown}\r\n            {...events}\r\n            onContextMenu={preventDefault}\r\n        >\r\n            <div className='container' ref={containerRef}>\r\n                {props.children}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n\r\nSortable.propTypes = {\r\n    onGrasp: PropTypes.func,\r\n    onDrag: PropTypes.func,\r\n    onDrop: PropTypes.func,\r\n    raised: PropTypes.bool,\r\n    dragClassName: PropTypes.string,\r\n}\r\n\r\nSortable.defaultProps = {\r\n    raised: true,\r\n    dragClassName: 'drag-style',\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Sortable from './Sortable';\r\nimport { multiMove } from './array';\r\n\r\nconst generateItems = length => [...Array(length).keys()].map(k => `Item ${k}`)\r\n\r\nexport default function App() {\r\n\r\n    let [items, setItems] = useState(generateItems(18));\r\n\r\n    const onDrop = ({ indexes, toIndex }) => setItems(multiMove(items, indexes, toIndex));\r\n\r\n    return <div className='list'>\r\n        <Sortable dragClassName='drag-style' onDrop={onDrop}>\r\n            {items.map(item =>\r\n                <div key={item} className='list-item' style={{ height: item === 'Item 2' ? '70px' : item === 'Item 4' && '100px' }}>{item}</div>)\r\n            }\r\n        </Sortable>\r\n    </div>\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","export const move = (arr, removeFrom = null, insertAt = null) => {\r\n    /*\r\n        Adds item if removeFrom is null\r\n        Removes item if insertAt is null\r\n    */\r\n    if (insertAt === removeFrom) return arr;\r\n    if (isNaN(Number(removeFrom) || isNaN(Number(insertAt)))) return arr;\r\n\r\n    let _arr = [...arr];\r\n\r\n    const item = (removeFrom !== null) ? _arr.splice(removeFrom, 1)[0] : null;\r\n    if (insertAt !== null) {\r\n        _arr.splice(insertAt, 0, item);\r\n    }\r\n\r\n    return _arr;\r\n};\r\n\r\nexport const shuffle = arr => arr\r\n    .map(a => [Math.random(), a])\r\n    .sort((a, b) => a[0] - b[0])\r\n    .map(a => a[1]);\r\n\r\nexport const reverse = arr => arr.slice().reverse();\r\n\r\nexport function multiMove(array, indexes, toIndex) {\r\n    const element = array[toIndex];\r\n    const removedElements = array.filter((_, index) => indexes.includes(index));\r\n    const remainingElements = array.filter((_, index) => !indexes.includes(index));\r\n    console.table(removedElements);\r\n    console.table(remainingElements);\r\n    const index = remainingElements.indexOf(element);\r\n    console.log(index);\r\n    remainingElements.splice(index, 0, ...removedElements);\r\n    console.table(remainingElements);\r\n    return remainingElements;\r\n\r\n}"],"sourceRoot":""}