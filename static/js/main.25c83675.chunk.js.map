{"version":3,"sources":["events.js","Draggable.js","ElementCache.js","Handler.js","Sortable.js","App.js","index.js","array.js"],"names":["preventDefault","e","transitions","grasp","moveIntoPlace","settleIntoPlace","Draggable","element","props","startPosition","currentPosition","direction","left","offsetLeft","top","offsetTop","height","offsetHeight","width","offsetWidth","_window$getComputedSt","window","getComputedStyle","marginTop","marginBottom","marginLeft","marginRight","initialCenter","dimensions","Math","max","parseInt","displacement","absoluteCenter","this","margins","bottom","right","position","_this$displacement","Object","slicedToArray","x","y","style","transform","concat","hasMoved","willChange","zIndex","transition","classList","add","dragClassName","raised","_element$getBoundingC","getBoundingClientRect","keyframes","animate","duration","easing","finished","target","eventName","event","Promise","resolve","reject","addEventListener","handler","_ref","removeEventListener","requestAnimationFrame","remove","release","_release","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","stop","_x","_x2","apply","arguments","elementCache","elements","staggerDelay","map","Element","get","index","find","indexOf","findIndex","_ref2","count","length","removeAt","splice","resetStyles","forEach","_ref3","selected","getSelected","filter","_ref4","_getSelectedIndexes","selectedIndexes","_ref5","push","getSelectedIndexes","_ref6","print","console","table","item","innerText","translateY","_element$translateY","select","deselect","toggle","Handler","container","draggable","draggableIndex","placeholderIndex","rafId","isHolding","scrollable","parentNode","ElementCache","Array","from","children","scrollableRect","clearTimeout","undefined","setTimeout","move","repeatUntilNextTouchMove","_getScrollValue","targetRect","bottomOffset","min","innerHeight","topOffset","maxScrollTop","scrollHeight","clientHeight","offset","round","scrollTop","getScrollValue","_getScrollValue2","scrollOffset","newPositionY","prevPositionY","_draggable","_draggable$absoluteCe","centerY","shift","cancelAnimationFrame","_ref$translateY","prevent","targetY","_elementCache$get","windowScrollY","pageYOffset","document","documentElement","body","scrollableVisibleTop","unshift","indexes","toIndex","finalize","Sortable","_useState","useState","_useState2","setHandler","_useState3","_useState4","started","setStarted","_useState5","_useState6","usingTouch","setUsingTouch","containerRef","useRef","start","current","onGrasp","touches","clientX","clientY","Drag","onDrag","end","result","onDrop","useEffect","log","events","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","react_default","createElement","assign","overflowY","onPointerDown","pointerType","onContextMenu","className","ref","defaultProps","generateItems","toConsumableArray","keys","k","ReactDOM","render","items","setItems","array","removedElements","_","includes","remainingElements","multiMove","key","getElementById"],"mappings":"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","file":"static/js/main.25c83675.chunk.js","sourcesContent":["export function preventDefault(e) { e.preventDefault() }\r\nexport function stopPropagation(e) { e.stopPropagation() }\r\n\r\nexport function fireAndForget(target, eventName) {\r\n    return new Promise((resolve, reject) => {\r\n        const handler = ({ target }) => {\r\n            target.removeEventListener(eventName, handler, false);\r\n            resolve();\r\n        }\r\n        target.addEventListener(eventName, handler, false);\r\n    })\r\n}\r\n","import './Draggable.css';\r\nimport { fireAndForget } from './events';\r\nimport 'web-animations-js/web-animations.min';\r\n\r\nconst transitions = {\r\n    grasp: 'box-shadow .2s ease-in-out, background-color .2s ease-in-out',\r\n    moveIntoPlace: 'transform .2s ease-in-out',\r\n    settleIntoPlace: 'box-shadow .2s ease-in-out, background-color .2s ease-in-out'\r\n}\r\n\r\nexport default function Draggable(element, props) {\r\n\r\n    let startPosition = null;\r\n    let currentPosition = null;\r\n    let direction = null;\r\n\r\n    const { offsetLeft: left, offsetTop: top, offsetHeight: height, offsetWidth: width } = element;\r\n    const { marginTop, marginBottom, marginLeft, marginRight } = window.getComputedStyle(element);\r\n\r\n    const initialCenter = [left + width / 2, top + height / 2];\r\n    const dimensions = {\r\n        width: width + Math.max(parseInt(marginLeft), parseInt(marginRight)),\r\n        height: height + Math.max(parseInt(marginTop), parseInt(marginBottom)),\r\n    }\r\n\r\n    return {\r\n\r\n        get element() { return element },\r\n\r\n        get direction() { return direction },\r\n\r\n        get displacement() {\r\n            return [\r\n                currentPosition[0] - startPosition[0],\r\n                currentPosition[1] - startPosition[1],\r\n            ]\r\n        },\r\n\r\n        get dimensions() { return dimensions },\r\n\r\n        get absoluteCenter() {\r\n            return [initialCenter[0] + this.displacement[0], initialCenter[1] + this.displacement[1]];\r\n        },\r\n\r\n        get margins() {\r\n            return {\r\n                top: parseInt(marginTop),\r\n                bottom: parseInt(marginBottom),\r\n                left: parseInt(marginLeft),\r\n                right: parseInt(marginRight),\r\n            }\r\n        },\r\n\r\n        set position(position) {\r\n            if (currentPosition) {\r\n                if (position[1] < currentPosition[1])\r\n                    direction = 'up';\r\n                else\r\n                    direction = 'down';\r\n            }\r\n            currentPosition = position;\r\n            if (!startPosition)\r\n                startPosition = currentPosition;\r\n            const [x, y] = this.displacement;\r\n            element.style.transform = `translate(${x}px,${y}px)`;\r\n        },\r\n\r\n        get position() { return currentPosition },\r\n\r\n        get hasMoved() { return startPosition !== currentPosition },\r\n\r\n        grasp() {\r\n            element.style.willChange = 'transform';\r\n            element.style.zIndex = 999;\r\n            // element.style.pointerEvents = 'none';\r\n            element.style.position = 'relative';\r\n            element.style.transition = transitions.grasp;\r\n            element.classList.add(props.dragClassName);\r\n            props.raised && element.classList.add('shadow');\r\n        },\r\n\r\n        moveIntoPlace(x, y) {\r\n            const { left, top } = element.getBoundingClientRect();\r\n            const keyframes = [\r\n                { transform: `translate(${left - x - this.margins.left}px,${top - y}px)` },\r\n                { transform: `translate(${0}px,${0}px)` },\r\n            ];\r\n            const animation = element.animate(keyframes, {\r\n                duration: 200,\r\n                easing: 'ease-in-out',\r\n            });\r\n            return animation.finished;\r\n        },\r\n\r\n        settleIntoPlace() {\r\n            const event = fireAndForget(element, \"transitionend\");\r\n            requestAnimationFrame(() => {\r\n                element.classList.remove(props.dragClassName);\r\n                element.classList.remove('shadow');\r\n                element.style.transition = transitions.settleIntoPlace;\r\n            });\r\n            return event;\r\n        },\r\n\r\n        async release(x, y) {\r\n            await this.moveIntoPlace(x, y);\r\n            element.style.zIndex = null;\r\n            element.style.transform = null;\r\n        }\r\n    }\r\n}\r\n","const transitions = {\r\n    grasp: 'box-shadow .2s ease-in-out, background-color .2s ease-in-out',\r\n    moveIntoPlace: 'transform .2s ease-in-out',\r\n    settleIntoPlace: 'box-shadow 0.4s ease-in-out, background-color 0.4s ease-in-out'\r\n}\r\n\r\n\r\nexport default function elementCache(elements, props) {\r\n\r\n    let staggerDelay = 0.02;\r\n    const elementCache = elements.map(element => {\r\n        // element.classList.add('fadein');\r\n        element.style.transition = transitions.settleIntoPlace;\r\n        // element.style.transitionDelay = `${0.5 + staggerDelay}s`;\r\n        element.classList.remove(props.dragClassName);\r\n        element.classList.remove('shadow');\r\n        element.style.willChange = null;\r\n        staggerDelay += staggerDelay;\r\n        return new Element(element)\r\n    });\r\n\r\n    return {\r\n\r\n        get: index => elementCache[index],\r\n\r\n        find: element => elementCache.find(({ element: cachedElement }) => cachedElement === element),\r\n\r\n        indexOf: element => elementCache.findIndex(({ element: cachedElement }) => cachedElement === element),\r\n\r\n        get count() { return elementCache.length },\r\n\r\n        removeAt(index) { elementCache.splice(index, 1) },\r\n\r\n        resetStyles() {\r\n            elementCache.forEach(({ element, selected }) => {\r\n                if (selected) {\r\n                    element.style.willChange = 'opacity';\r\n                    // element.classList.add('fadein');\r\n                }\r\n                else {\r\n                    element.classList.remove('fadein');\r\n                }\r\n\r\n                element.style.transition = null;\r\n                element.style.transform = null;\r\n            });\r\n        },\r\n\r\n        getSelected: () => elementCache.filter(({ selected }) => selected),\r\n\r\n        _getSelectedIndexes() {\r\n            let selectedIndexes = [];\r\n            elementCache.forEach(({ element, selected }) => {\r\n                const index = elements.indexOf(element);\r\n                selected && index > -1 && selectedIndexes.push(index)\r\n            });\r\n            return selectedIndexes;\r\n        },\r\n\r\n        getSelectedIndexes() {\r\n            let selectedIndexes = [];\r\n            elementCache.filter(({ selected }, index) => {\r\n                selected && selectedIndexes.push(index)\r\n            });\r\n            return selectedIndexes;\r\n        },\r\n\r\n        print() {\r\n            console.table(elementCache.map(element => {\r\n                const { element: { innerText: item }, top, translateY } = element;\r\n                return { item, top, translateY }\r\n            }));\r\n        }\r\n    }\r\n\r\n    function Element(element) {\r\n        const { offsetTop, offsetHeight: height, translateY = 0 } = element;\r\n        return {\r\n            element,\r\n            offsetTop,\r\n            height,\r\n            translateY,\r\n            marginTop: element.style.marginTop,\r\n            selected: null,\r\n            get top() { return this.offsetTop + this.translateY },\r\n            select() {\r\n                this.selected = true;\r\n                element.style.transition = transitions.grasp;\r\n                element.classList.add(props.dragClassName);\r\n                props.raised && element.classList.add('shadow');\r\n\r\n            },\r\n            deselect() {\r\n                this.selected = false;\r\n                element.style.transition = transitions.settleIntoPlace;\r\n                element.classList.remove(props.dragClassName);\r\n                element.classList.remove('shadow');\r\n\r\n            },\r\n            toggle() {\r\n                if (this.selected)\r\n                    this.deselect();\r\n                else\r\n                    this.select();\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Draggable from './Draggable';\r\nimport ElementCache from './ElementCache';\r\nimport { preventDefault } from './events';\r\n\r\nexport default function (container, props) {\r\n\r\n    const scrollable = container.parentNode;\r\n    let draggable;\r\n    let draggableIndex;\r\n    let placeholderIndex;\r\n    const children = Array.from(container.children);\r\n    let elementCache = new ElementCache(children, props);\r\n    let rafId;\r\n    let isHolding;\r\n\r\n    const scrollableRect = scrollable.getBoundingClientRect();\r\n\r\n    const scrollableVisibleTop = function () {\r\n        const windowScrollY = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\r\n        return container.offsetTop - windowScrollY - scrollable.scrollTop\r\n    }\r\n\r\n    return {\r\n\r\n        grasp(element) {\r\n\r\n            if (element === container) return;\r\n\r\n            if (!elementCache.getSelected().length) {\r\n                isHolding = setTimeout(() => {\r\n                    isHolding = undefined;\r\n                    const cachedElement = elementCache.find(element);\r\n                    cachedElement.toggle();\r\n                    draggable = undefined;\r\n                }, 300);\r\n                return;\r\n            }\r\n            else {\r\n                clearTimeout(isHolding);\r\n                const cachedElement = elementCache.find(element);\r\n                cachedElement.toggle();\r\n                draggable = undefined;\r\n                return;\r\n            }\r\n        },\r\n\r\n        move(element, x, y) {\r\n\r\n            if (element === container || element === scrollable) return;\r\n            if (isHolding) {\r\n                clearTimeout(isHolding);\r\n                return;\r\n            }\r\n\r\n            if (!draggable) {\r\n                draggable = new Draggable(element, props);\r\n\r\n                draggableIndex = elementCache.indexOf(draggable.element);\r\n                placeholderIndex = draggableIndex;\r\n\r\n                // elementCache.removeAt(draggableIndex);\r\n\r\n                disableScrolling();\r\n\r\n                draggable.grasp();\r\n            }\r\n            // if (prevent()) return;\r\n\r\n            rafId = requestAnimationFrame(repeatUntilNextTouchMove);\r\n            let prevPositionY = null;\r\n            // Allows auto scroll to continue when draggable is held in same place\r\n            function repeatUntilNextTouchMove() {\r\n\r\n                if (!draggable) return;\r\n                const [scrollTop, scrollOffset] = getScrollValue();\r\n                const newPositionY = y + scrollTop;\r\n\r\n                if (newPositionY === prevPositionY) return;\r\n\r\n                scrollable.scrollTop = scrollTop;\r\n                draggable.position = [x, newPositionY];\r\n                prevPositionY = newPositionY;\r\n\r\n                const { direction, dimensions: { height }, absoluteCenter: [, centerY] } = draggable;\r\n\r\n                if (direction === 'down') {\r\n                    for (placeholderIndex; placeholderIndex < elementCache.count; placeholderIndex++) {\r\n                        const element = elementCache.get(placeholderIndex);\r\n                        if (element.element === draggable.element) continue;\r\n                        if (element.top > centerY) break;\r\n                        element.translateY -= height;\r\n                        shift(element);\r\n                    }\r\n                }\r\n                else if (direction === 'up') {\r\n                    for (placeholderIndex; placeholderIndex > 0; placeholderIndex--) {\r\n                        const element = elementCache.get(placeholderIndex - 1);\r\n                        if (element.element === draggable.element) continue;\r\n                        const bottom = element.top + element.height;\r\n                        if (bottom < centerY) break;\r\n                        element.translateY += height;\r\n                        shift(element);\r\n                    }\r\n                }\r\n                if (placeholderIndex <= 0 || placeholderIndex >= elementCache.count || scrollOffset === 0) {\r\n                    cancelAnimationFrame(rafId);\r\n                }\r\n                else {\r\n                    rafId = requestAnimationFrame(repeatUntilNextTouchMove);\r\n                }\r\n\r\n            }\r\n\r\n            function shift({ element, translateY = 0 }) {\r\n                // element.style.willChange = 'transform';\r\n                // requestAnimationFrame(() => {\r\n                element.style['transition'] = 'transform .2s ease-in-out';\r\n                element.style['transform'] = `translateY(${translateY}px)`;\r\n                //     element.style.willChange = null;\r\n                // });\r\n            }\r\n\r\n        },\r\n\r\n        release() {\r\n\r\n            if (prevent()) return null;\r\n\r\n            enableScrolling();\r\n\r\n            let targetY;\r\n            if (placeholderIndex < elementCache.count) {\r\n                targetY = elementCache.get(placeholderIndex).top;\r\n            }\r\n            else {\r\n                const { offsetTop, marginTop, height, element } = elementCache.get(placeholderIndex - 1);\r\n                targetY = offsetTop + draggable.margins.top + height;\r\n            }\r\n\r\n            targetY = targetY - draggable.dimensions.height + scrollableVisibleTop();\r\n\r\n\r\n            let selectedIndexes = elementCache.getSelectedIndexes();\r\n\r\n            selectedIndexes.unshift(draggableIndex);\r\n\r\n            try { return { indexes: selectedIndexes, toIndex: placeholderIndex } }\r\n\r\n            // Do the drop animation after reordering\r\n            finally {\r\n\r\n                finalize();\r\n\r\n                async function finalize() {\r\n                    draggable.release(0, targetY);\r\n                    elementCache.resetStyles();\r\n\r\n                    draggable = undefined;\r\n                }\r\n            }\r\n\r\n        },\r\n    }\r\n\r\n    function disableScrolling() {\r\n        // scrollable.style.overflowY = 'hidden';\r\n        // scrollable.style.touchAction = 'none';\r\n        scrollable.addEventListener('touchmove', preventDefault);\r\n    }\r\n\r\n    function enableScrolling() {\r\n        // scrollable.style.overflowY = 'scroll';\r\n        // scrollable.style.touchAction = 'pan-y';\r\n        scrollable.removeEventListener('touchmove', preventDefault);\r\n    }\r\n\r\n    function prevent() {\r\n\r\n        if (isHolding) {\r\n            clearTimeout(isHolding);\r\n            isHolding = undefined;\r\n            draggable = undefined;\r\n        }\r\n\r\n        if (!draggable) return true;\r\n\r\n        cancelAnimationFrame(rafId);\r\n\r\n        return false;\r\n    }\r\n\r\n    function getScrollValue() {\r\n\r\n        const triggerOffset = 80;\r\n        const speedMultiplier = 0.125;\r\n\r\n        // const scrollableRect = scrollable.getBoundingClientRect();\r\n        const targetRect = draggable.element.getBoundingClientRect();\r\n        const bottomOffset = Math.min(scrollableRect.bottom, window.innerHeight) - targetRect.bottom;\r\n        const topOffset = targetRect.top - Math.max(scrollableRect.top, 0);\r\n        const maxScrollTop = scrollable.scrollHeight - Math.min(scrollable.clientHeight, window.innerHeight);\r\n\r\n        let offset = 0;\r\n        if (bottomOffset < triggerOffset)\r\n            offset = Math.min(triggerOffset, triggerOffset - bottomOffset);\r\n        else if (topOffset < triggerOffset)\r\n            offset = Math.max(-triggerOffset, topOffset - triggerOffset);\r\n\r\n        const top = Math.max(0, Math.min(maxScrollTop, Math.round(scrollable.scrollTop + offset * speedMultiplier)));\r\n\r\n        return [top, offset];\r\n    }\r\n\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Handler from './Handler';\r\nimport { preventDefault } from './events';\r\n\r\n//------------------------------------------------------------------------------\r\n\r\nexport default function Sortable(props) {\r\n\r\n    let [handler, setHandler] = useState();\r\n    let [started, setStarted] = useState(false);\r\n    let [usingTouch, setUsingTouch] = useState(true);\r\n\r\n    const containerRef = useRef();\r\n\r\n    useEffect(() => {\r\n        console.log('new Handler!!');\r\n        setHandler(new Handler(containerRef.current, props));\r\n    }, [props.children]);\r\n\r\n    useEffect(() => {\r\n        if (!usingTouch && started)\r\n            document.body.addEventListener(\"mousemove\", move);\r\n        else\r\n            document.body.removeEventListener(\"mousemove\", move);\r\n        return () => {\r\n            document.body.removeEventListener(\"mousemove\", move);\r\n        };\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (usingTouch && started)\r\n            document.body.addEventListener(\"touchmove\", move);\r\n        else\r\n            document.body.removeEventListener(\"touchmove\", move);\r\n        return () => {\r\n            document.body.removeEventListener(\"touchmove\", move);\r\n        };\r\n    });\r\n\r\n    function handlePointerDown(e) {\r\n        if (e.pointerType === 'touch')\r\n            setUsingTouch(true);\r\n        else\r\n            setUsingTouch(false);\r\n    }\r\n\r\n    function start(e) {\r\n        setStarted(true);\r\n        if (e.target.parentNode !== containerRef.current) return;\r\n        handler.grasp(e.target);\r\n        props.onGrasp && props.onGrasp();\r\n    }\r\n\r\n    function move(e) {\r\n        if (usingTouch)\r\n            handler.move(e.target, e.touches[0].clientX, e.touches[0].clientY);\r\n        else\r\n            handler.move(e.target, e.clientX, e.clientY);\r\n\r\n        props.Drag && props.onDrag();\r\n    }\r\n\r\n    function end(e) {\r\n        const result = handler.release();\r\n        setStarted(false);\r\n        result && props.onDrop && props.onDrop(result);\r\n    }\r\n\r\n    let events = {};\r\n\r\n    if (handler) {\r\n        if (usingTouch) events = {\r\n            onTouchStart: start,\r\n            // onTouchMove: move,\r\n            onTouchEnd: end,\r\n        }\r\n        else events = {\r\n            onMouseDown: start,\r\n            // onMouseMove: started ? move : null,\r\n            onMouseUp: end,\r\n            // onMouseLeave:  end,\r\n        }\r\n    }\r\n\r\n    return (\r\n        //\r\n        // Notes:\r\n        //\r\n        // 1. The draggable is positioned relatively. In order for it to not be cut-off when dragged\r\n        // beyond the container edges requires overflow-x: visible on the container. But it's not\r\n        // possible to have overflow visible on one axis and allow the other axis to scroll: the\r\n        // visible axis will be overidden with overflow: auto (google it!).\r\n        // The solution is to wrap the container with overflow-x: visible in a scrollable div as\r\n        // below.\r\n        // Positioning the draggable absolutely allows it to remain visible no matter where it is\r\n        // but will close the placeholder when grasped. It also requires its size to be tweaked\r\n        // on grasp as it loses its container padding.\r\n        //\r\n        // 2. The event listeners are attached to the wrapper (not the container) as the mousemove\r\n        // events do not fire when the draggable is outside the container (and dragged fast so that\r\n        // the mouse leaves the draggable). I.e. the draggable freezes until the mouse is moved over\r\n        // it again. The container fits the list contenet snuggly whereas the wrapper is the full width\r\n        // of the page -> events on the wrapper continue to fire.\r\n        // Update: Now adds mousemove listener to the document so others can go either on container or\r\n        // wrapper. Leave on wrapper for now.\r\n\r\n        <div style={{ overflowY: 'scroll' }}\r\n            onPointerDown={handlePointerDown}\r\n            {...events}\r\n            onContextMenu={preventDefault}\r\n        >\r\n            <div className='container' ref={containerRef}>\r\n                {props.children}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n\r\nSortable.propTypes = {\r\n    onGrasp: PropTypes.func,\r\n    onDrag: PropTypes.func,\r\n    onDrop: PropTypes.func,\r\n    raised: PropTypes.bool,\r\n    dragClassName: PropTypes.string,\r\n}\r\n\r\nSortable.defaultProps = {\r\n    raised: true,\r\n    dragClassName: 'drag-style',\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Sortable from './Sortable';\r\nimport { multiMove } from './array';\r\n\r\nconst generateItems = length => [...Array(length).keys()].map(k => `Item ${k}`)\r\n\r\nexport default function App() {\r\n\r\n    let [items, setItems] = useState(generateItems(18));\r\n\r\n    const onDrop = ({ indexes, toIndex }) => setItems(multiMove(items, indexes, toIndex));\r\n\r\n    return <div className='list'>\r\n        <Sortable dragClassName='drag-style' onDrop={onDrop}>\r\n            {items.map(item =>\r\n                <div key={item} className='list-item' style={{ height: item === 'Item 2' ? '70px' : item === 'Item 4' && '100px' }}>{item}</div>)\r\n            }\r\n        </Sortable>\r\n    </div>\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","export const move = (arr, removeFrom = null, insertAt = null) => {\r\n    /*\r\n        Adds item if removeFrom is null\r\n        Removes item if insertAt is null\r\n    */\r\n    if (insertAt === removeFrom) return arr;\r\n    if (isNaN(Number(removeFrom) || isNaN(Number(insertAt)))) return arr;\r\n\r\n    let _arr = [...arr];\r\n\r\n    const item = (removeFrom !== null) ? _arr.splice(removeFrom, 1)[0] : null;\r\n    if (insertAt !== null) {\r\n        _arr.splice(insertAt, 0, item);\r\n    }\r\n\r\n    return _arr;\r\n};\r\n\r\nexport const shuffle = arr => arr\r\n    .map(a => [Math.random(), a])\r\n    .sort((a, b) => a[0] - b[0])\r\n    .map(a => a[1]);\r\n\r\nexport const reverse = arr => arr.slice().reverse();\r\n\r\nexport function multiMove(array, indexes, toIndex) {\r\n\r\n    const element = array[toIndex];\r\n    const removedElements = array.filter((_, index) => indexes.includes(index));\r\n    const remainingElements = array.filter((_, index) => !indexes.includes(index));\r\n    const index = remainingElements.indexOf(element);\r\n\r\n    if (index > -1)\r\n        remainingElements.splice(index, 0, ...removedElements);\r\n    else\r\n        remainingElements.push(...removedElements);\r\n\r\n    return remainingElements;\r\n\r\n}\r\n\r\nexport function _multiMove(array, indexes, toIndex) {\r\n    let result = array.slice();\r\n    indexes.forEach(removeFrom => { result = move(result, removeFrom, toIndex) });\r\n    return result;\r\n}"],"sourceRoot":""}