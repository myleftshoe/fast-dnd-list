{"version":3,"sources":["events.js","utils/math.clamp.js","Draggable.js","ElementCache.js","Handler.js","Sortable.js","App.js","index.js","array.js"],"names":["preventDefault","e","math_clamp","n","min","max","Math","transitions","grasp","moveIntoPlace","settleIntoPlace","Draggable","element","props","startPosition","currentPosition","direction","left","offsetLeft","top","offsetTop","height","offsetHeight","width","offsetWidth","_window$getComputedSt","window","getComputedStyle","marginTop","marginBottom","marginLeft","marginRight","margins","parseInt","bottom","right","initialCenter","dimensions","displacement","center","clamp","this","absoluteCenter","parentNode","clientHeight","scrollTop","position","_this$displacement","Object","slicedToArray","x","y","style","transform","concat","willChange","zIndex","transition","classList","add","dragClassName","raised","_this","Promise","resolve","_element$getBoundingC","getBoundingClientRect","keyframes","animate","duration","easing","onfinish","target","eventName","event","reject","addEventListener","handler","_ref","removeEventListener","requestAnimationFrame","remove","release","_release","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","stop","_x","_x2","apply","arguments","elementCache","elements","map","Element","get","index","find","indexOf","findIndex","_ref2","count","length","removeAt","splice","resetStyles","forEach","_ref3","print","console","table","item","innerText","translateY","_element$translateY","Handler","container","draggable","draggableIndex","placeholderIndex","rafId","isHolding","scrollable","ElementCache","Array","from","children","scrollHeight","lastCenterY","setTimeout","undefined","overflowY","move","prevent","repeatUntilNextTouchMove","_draggable","_draggable$absoluteCe","centerY","autoscroll","bottomOffset","topOffset","draggableY","offset","Boolean","autoScroll","trunc","shift","targetY","windowScrollY","pageYOffset","document","documentElement","body","scrollableVisibleTop","indexes","toIndex","distance","_ref$translateY","clearTimeout","cancelAnimationFrame","Sortable","_useState","useState","_useState2","setHandler","_useState3","_useState4","started","setStarted","_useState5","_useState6","usingTouch","setUsingTouch","containerRef","useRef","start","current","onGrasp","touches","clientX","clientY","Drag","onDrag","end","result","onDrop","useEffect","events","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","react_default","createElement","assign","onPointerDown","pointerType","onContextMenu","className","ref","React","cloneElement","visibility","defaultProps","generateItems","toConsumableArray","keys","k","ReactDOM","render","items","setItems","array","removedElements","filter","_","includes","remainingElements","push","multiMove","key","getElementById"],"mappings":"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","file":"static/js/main.ee174982.chunk.js","sourcesContent":["export function preventDefault(e) { e.preventDefault() }\r\nexport function stopPropagation(e) { e.stopPropagation() }\r\n\r\nexport function fireAndForget(target, eventName) {\r\n    return new Promise((resolve, reject) => {\r\n        const handler = ({ target }) => {\r\n            target.removeEventListener(eventName, handler, false);\r\n            resolve();\r\n        }\r\n        target.addEventListener(eventName, handler, false);\r\n    })\r\n}\r\n","export default (n, min, max) => Math.max(Math.min(n, max), min);\r\n","import './Draggable.css';\r\nimport { fireAndForget } from './events';\r\nimport 'web-animations-js/web-animations.min';\r\nimport clamp from './utils/math.clamp';\r\n\r\nconst transitions = {\r\n    grasp: 'box-shadow .2s ease-in-out, background-color .2s ease-in-out',\r\n    moveIntoPlace: 'transform .2s ease-in-out',\r\n    settleIntoPlace: 'box-shadow .2s ease-in-out, background-color .2s ease-in-out'\r\n}\r\n\r\nexport default function Draggable(element, props) {\r\n\r\n    let startPosition = null;\r\n    let currentPosition = null;\r\n    let direction = null;\r\n\r\n    const { offsetLeft: left, offsetTop: top, offsetHeight: height, offsetWidth: width } = element;\r\n    const { marginTop, marginBottom, marginLeft, marginRight } = window.getComputedStyle(element);\r\n\r\n    const margins = {\r\n        top: parseInt(marginTop),\r\n        bottom: parseInt(marginBottom),\r\n        left: parseInt(marginLeft),\r\n        right: parseInt(marginRight),\r\n    };\r\n\r\n    const initialCenter = [left + width / 2, top + height / 2];\r\n    const dimensions = {\r\n        width: width + Math.max(margins.left, margins.right),\r\n        height: height + Math.max(margins.top, margins.bottom),\r\n    }\r\n\r\n    return {\r\n\r\n        get element() { return element },\r\n\r\n        get direction() { return direction },\r\n\r\n        get displacement() {\r\n            if (!currentPosition || !startPosition)\r\n                return null;\r\n            return [\r\n                currentPosition[0] - startPosition[0],\r\n                currentPosition[1] - startPosition[1],\r\n            ]\r\n        },\r\n\r\n        get dimensions() { return dimensions },\r\n\r\n        get center() {\r\n            return clamp(this.absoluteCenter[1], 0, element.parentNode.clientHeight) - element.parentNode.scrollTop;\r\n        },\r\n\r\n        get absoluteCenter() {\r\n            if (!this.displacement)\r\n                return [initialCenter[0], initialCenter[1]];\r\n            return [initialCenter[0] + this.displacement[0], initialCenter[1] + this.displacement[1]];\r\n        },\r\n\r\n        get margins() { return margins },\r\n\r\n        set position(position) {\r\n            if (currentPosition) {\r\n                if (position[1] < currentPosition[1])\r\n                    direction = 'up';\r\n                else\r\n                    direction = 'down';\r\n            }\r\n            currentPosition = position;\r\n            if (!startPosition)\r\n                startPosition = currentPosition;\r\n            const [x, y] = this.displacement;\r\n            element.style.transform = `translate3d(${x}px,${y}px,0px)`;\r\n        },\r\n\r\n        get position() { return currentPosition },\r\n\r\n        grasp() {\r\n            element.style.willChange = 'transform';\r\n            element.style.zIndex = 999;\r\n            // element.style.pointerEvents = 'none';\r\n            element.style.position = 'relative';\r\n            element.style.transition = transitions.grasp;\r\n            element.classList.add(props.dragClassName);\r\n            props.raised && element.classList.add('shadow');\r\n        },\r\n\r\n        moveIntoPlace(x, y) {\r\n            return new Promise(resolve => {\r\n                const { left, top } = element.getBoundingClientRect();\r\n                const keyframes = [\r\n                    { transform: `translate(${left - x - this.margins.left}px,${top - y}px)` },\r\n                    { transform: `translate(${0}px,${0}px)` },\r\n                ];\r\n                const animation = element.animate(keyframes, {\r\n                    duration: 200,\r\n                    easing: 'ease-in-out',\r\n                });\r\n                animation.onfinish = () => {\r\n                    // The animation does not preserve its end state ->\r\n                    //  update the styles directly to reflect final state.\r\n                    element.style.transition = null;\r\n                    element.style.transform = `translate(${0}px,${0}px)`;\r\n                    resolve();\r\n                }\r\n            });\r\n            // Not supported in Chrome yet: (polyfill available but above Promise is simpler)\r\n            // return animation.finished;\r\n        },\r\n\r\n        settleIntoPlace() {\r\n            const event = fireAndForget(element, \"transitionend\");\r\n            requestAnimationFrame(() => {\r\n                element.classList.remove(props.dragClassName);\r\n                element.classList.remove('shadow');\r\n                element.style.transition = transitions.settleIntoPlace;\r\n            });\r\n            return event;\r\n        },\r\n\r\n        async release(x, y) {\r\n            await this.moveIntoPlace(x, y);\r\n            await this.settleIntoPlace();\r\n            element.style.zIndex = null;\r\n            element.style.transition = null;\r\n            element.style.transform = null;\r\n        }\r\n    }\r\n}\r\n","export default function elementCache(elements) {\r\n\r\n    const elementCache = elements.map(element => new Element(element));\r\n\r\n    return {\r\n\r\n        get: index => elementCache[index],\r\n\r\n        find: element => elementCache.find(({ element: cachedElement }) => cachedElement === element),\r\n\r\n        indexOf: element => elementCache.findIndex(({ element: cachedElement }) => cachedElement === element),\r\n\r\n        get count() { return elementCache.length },\r\n\r\n        removeAt(index) { elementCache.splice(index, 1) },\r\n\r\n        resetStyles() {\r\n            elementCache.forEach(({ element }) => {\r\n                element.style.transition = null;\r\n                element.style.transform = null;\r\n            });\r\n        },\r\n\r\n        print() {\r\n            console.table(elementCache.map(element => {\r\n                const { element: { innerText: item }, top, translateY } = element;\r\n                return { item, top, translateY }\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction Element(element) {\r\n    const { offsetTop, offsetHeight: height, translateY = 0 } = element;\r\n    return {\r\n        element,\r\n        offsetTop,\r\n        height,\r\n        translateY,\r\n        get top() { return this.offsetTop + this.translateY }\r\n    }\r\n}","import Draggable from './Draggable';\r\nimport ElementCache from './ElementCache';\r\nimport clamp from './utils/math.clamp';\r\n\r\nexport default function (container, props) {\r\n\r\n    const scrollable = container.parentNode;\r\n\r\n    let draggable;\r\n    let draggableIndex;\r\n\r\n    let placeholderIndex;\r\n    const elementCache = new ElementCache(Array.from(container.children));\r\n\r\n    let rafId;\r\n    let isHolding;\r\n\r\n    const { scrollHeight, clientHeight } = scrollable;\r\n    let scrollTop = scrollable.scrollTop;\r\n\r\n    let lastCenterY = null;\r\n\r\n    return {\r\n\r\n        grasp(element) {\r\n\r\n            if (element === container || draggable) return;\r\n\r\n            draggable = new Draggable(element, props);\r\n\r\n            draggableIndex = elementCache.indexOf(draggable.element);\r\n\r\n            placeholderIndex = draggableIndex;\r\n\r\n            // elementCache.removeAt(draggableIndex);\r\n\r\n            isHolding = setTimeout(() => {\r\n                isHolding = undefined;\r\n                scrollTop = scrollable.scrollTop;\r\n                disableScrolling();\r\n                draggable.grasp();\r\n            }, 300);\r\n\r\n        },\r\n\r\n        move(x, y) {\r\n\r\n            if (prevent()) return;\r\n\r\n            rafId = requestAnimationFrame(repeatUntilNextTouchMove);\r\n\r\n            // Allows auto scroll to continue when draggable is held in same place\r\n\r\n\r\n            function repeatUntilNextTouchMove() {\r\n\r\n                const { direction, dimensions: { height }, absoluteCenter: [, centerY] } = draggable;\r\n\r\n                const autoscroll = autoScroll();\r\n\r\n                draggable.position = [x, clamp(y + scrollTop, 0, scrollHeight - draggable.dimensions.height)];\r\n\r\n                if (Math.trunc(centerY) === Math.trunc(lastCenterY)) return;\r\n                lastCenterY = centerY;\r\n\r\n                if (direction === 'down') {\r\n                    for (placeholderIndex; placeholderIndex < elementCache.count - 1; placeholderIndex++) {\r\n                        const element = elementCache.get(placeholderIndex);\r\n                        if (element.element === draggable.element) continue;\r\n                        if (element.top > centerY) break;\r\n                        shift(element, -height);\r\n                        element.translateY -= height;\r\n                    }\r\n                }\r\n                else if (direction === 'up') {\r\n                    for (placeholderIndex; placeholderIndex > 0; placeholderIndex--) {\r\n                        const element = elementCache.get(placeholderIndex - 1);\r\n                        if (element.element === draggable.element) continue;\r\n                        const bottom = element.top + element.height;\r\n                        if (bottom < centerY) break;\r\n                        shift(element, +height);\r\n                        element.translateY += height;\r\n                    }\r\n                }\r\n\r\n                if (autoscroll)\r\n                    rafId = requestAnimationFrame(repeatUntilNextTouchMove);\r\n\r\n            }\r\n\r\n        },\r\n\r\n        release(e) {\r\n\r\n            if (prevent()) return null;\r\n\r\n            enableScrolling();\r\n\r\n            let targetY = elementCache.get(placeholderIndex).top + scrollableVisibleTop();\r\n\r\n            if (placeholderIndex !== draggableIndex)\r\n                targetY -= draggable.dimensions.height;\r\n\r\n            try {\r\n\r\n                if (placeholderIndex === draggableIndex) return null;\r\n\r\n                return { indexes: [draggableIndex], toIndex: placeholderIndex }\r\n            }\r\n            // Do the drop animation after reordering\r\n            finally {\r\n\r\n                draggable.release(0, targetY);\r\n\r\n                elementCache.resetStyles();\r\n                draggable = undefined;\r\n\r\n            }\r\n        },\r\n    }\r\n\r\n    function scrollableVisibleTop() {\r\n        const windowScrollY = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\r\n        return container.offsetTop - windowScrollY - scrollable.scrollTop\r\n    }\r\n\r\n    function shift({ element, translateY = 0 }, distance) {\r\n        // element.style.willChange = 'transform';\r\n        // requestAnimationFrame(() => {\r\n        element.style['transition'] = 'transform .2s ease-in-out';\r\n        element.style['transform'] = `translateY(${translateY + distance}px)`;\r\n        //     element.style.willChange = null;\r\n        // });\r\n    }\r\n\r\n    function disableScrolling() {\r\n        scrollable.style.overflowY = 'hidden';\r\n        // scrollable.style.touchAction = 'none';\r\n        // scrollable.addEventListener('touchmove', preventDefault);\r\n    }\r\n\r\n    function enableScrolling() {\r\n        scrollable.style.overflowY = 'scroll';\r\n        // scrollable.style.touchAction = 'pan-y';\r\n        // scrollable.removeEventListener('touchmove', preventDefault);\r\n    }\r\n\r\n    function prevent() {\r\n\r\n        if (isHolding) {\r\n            clearTimeout(isHolding);\r\n            isHolding = undefined;\r\n            draggable = undefined;\r\n        }\r\n\r\n        if (!draggable) return true;\r\n\r\n        cancelAnimationFrame(rafId);\r\n\r\n        return false;\r\n    }\r\n\r\n    function autoScroll() {\r\n\r\n        const triggerOffset = 100;\r\n        const speedMultiplier = 0.25;\r\n\r\n        const bottomOffset = clientHeight - triggerOffset + scrollTop;\r\n        const topOffset = triggerOffset + scrollTop;\r\n\r\n        const draggableY = draggable.absoluteCenter[1];\r\n\r\n        let offset = 0;\r\n        if (draggableY > bottomOffset)\r\n            offset = draggableY - bottomOffset;\r\n        else if (draggableY < topOffset && scrollTop > 0)\r\n            offset = draggableY - topOffset;\r\n\r\n        scrollTop = scrollTop + offset * speedMultiplier;\r\n        scrollable.scrollTop = scrollTop;\r\n\r\n        return Boolean(offset);\r\n    }\r\n\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Handler from './Handler';\r\nimport { preventDefault } from './events';\r\n\r\n//------------------------------------------------------------------------------\r\n\r\nexport default function Sortable(props) {\r\n\r\n    let [handler, setHandler] = useState();\r\n    let [started, setStarted] = useState(false);\r\n    let [usingTouch, setUsingTouch] = useState(true);\r\n\r\n    const containerRef = useRef();\r\n\r\n    useEffect(() => {\r\n        setHandler(new Handler(containerRef.current, props));\r\n    }, [props.children]);\r\n\r\n    useEffect(() => {\r\n        if (!usingTouch && started)\r\n            document.body.addEventListener(\"mousemove\", move);\r\n        return () => {\r\n            document.body.removeEventListener(\"mousemove\", move);\r\n        };\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (usingTouch && started)\r\n            document.body.addEventListener(\"touchmove\", move);\r\n        return () => {\r\n            document.body.removeEventListener(\"touchmove\", move);\r\n        };\r\n    });\r\n\r\n    function handlePointerDown(e) {\r\n        if (e.pointerType === 'touch')\r\n            setUsingTouch(true);\r\n        else\r\n            setUsingTouch(false);\r\n    }\r\n\r\n    function start(e) {\r\n        setStarted(true);\r\n        if (e.target.parentNode !== containerRef.current) return;\r\n        handler.grasp(e.target);\r\n        props.onGrasp && props.onGrasp();\r\n    }\r\n\r\n    function move(e) {\r\n        if (usingTouch)\r\n            handler.move(e.touches[0].clientX, e.touches[0].clientY);\r\n        else\r\n            handler.move(e.clientX, e.clientY);\r\n\r\n        props.Drag && props.onDrag();\r\n    }\r\n\r\n    function end() {\r\n        const result = handler.release();\r\n        setStarted(false);\r\n        result && props.onDrop && props.onDrop(result);\r\n    }\r\n\r\n    let events = {};\r\n\r\n    if (handler) {\r\n        if (usingTouch) events = {\r\n            onTouchStart: start,\r\n            // onTouchMove: move,\r\n            onTouchEnd: end,\r\n        }\r\n        else events = {\r\n            onMouseDown: start,\r\n            // onMouseMove: started ? move : null,\r\n            onMouseUp: end,\r\n            // onMouseLeave:  end,\r\n        }\r\n    }\r\n\r\n    return (\r\n        //\r\n        // Notes:\r\n        //\r\n        // 1. The draggable is positioned relatively. In order for it to not be cut-off when dragged\r\n        // beyond the container edges requires overflow-x: visible on the container. But it's not\r\n        // possible to have overflow visible on one axis and allow the other axis to scroll: the\r\n        // visible axis will be overidden with overflow: auto (google it!).\r\n        // The solution is to wrap the container with overflow-x: visible in a scrollable div as\r\n        // below.\r\n        // Positioning the draggable absolutely allows it to remain visible no matter where it is\r\n        // but will close the placeholder when grasped. It also requires its size to be tweaked\r\n        // on grasp as it loses its container padding.\r\n        //\r\n        // 2. The event listeners are attached to the wrapper (not the container) as the mousemove\r\n        // events do not fire when the draggable is outside the container (and dragged fast so that\r\n        // the mouse leaves the draggable). I.e. the draggable freezes until the mouse is moved over\r\n        // it again. The container fits the list contenet snuggly whereas the wrapper is the full width\r\n        // of the page -> events on the wrapper continue to fire.\r\n        // Update: Now adds mousemove listener to the document so others can go either on container or\r\n        // wrapper. Leave on wrapper for now.\r\n\r\n        <div style={{ overflowY: 'scroll' }}\r\n            onPointerDown={handlePointerDown}\r\n            {...events}\r\n            onContextMenu={preventDefault}\r\n        >\r\n            <div className='container' ref={containerRef}>\r\n                {props.children}\r\n                {React.cloneElement(props.children[0], { style: { visibility: 'hidden' } }, null)}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n\r\nSortable.propTypes = {\r\n    onGrasp: PropTypes.func,\r\n    onDrag: PropTypes.func,\r\n    onDrop: PropTypes.func,\r\n    raised: PropTypes.bool,\r\n    dragClassName: PropTypes.string,\r\n}\r\n\r\nSortable.defaultProps = {\r\n    raised: true,\r\n    dragClassName: 'drag-style',\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Sortable from './Sortable';\r\nimport { multiMove } from './array';\r\n\r\nconst generateItems = length => [...Array(length).keys()].map(k => `Item ${k}`)\r\n\r\nexport default function App() {\r\n\r\n    let [items, setItems] = useState(generateItems(18));\r\n\r\n    const onDrop = ({ indexes, toIndex }) => setItems(multiMove(items, indexes, toIndex));\r\n\r\n    return <div className='list'>\r\n        <Sortable dragClassName='drag-style' onDrop={onDrop}>\r\n            {items.map(item =>\r\n                <div key={item} className='list-item' style={{ height: item === 'Item 2' ? '70px' : item === 'Item 4' && '100px' }}>{item}</div>)\r\n            }\r\n        </Sortable>\r\n    </div>\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","export const move = (array, removeFrom = null, insertAt = null) => {\r\n\r\n    // Adds item if removeFrom is null\r\n    // Removes item if insertAt is null\r\n\r\n    if (insertAt === removeFrom) return array;\r\n    if (isNaN(Number(removeFrom) || isNaN(Number(insertAt)))) return array;\r\n\r\n    let _array = [...array];\r\n\r\n    const item = (removeFrom !== null) ? _array.splice(removeFrom, 1)[0] : null;\r\n    if (insertAt !== null) {\r\n        _array.splice(insertAt, 0, item);\r\n    }\r\n\r\n    return _array;\r\n};\r\n\r\nexport const shuffle = array => array\r\n    .map(a => [Math.random(), a])\r\n    .sort((a, b) => a[0] - b[0])\r\n    .map(a => a[1]);\r\n\r\nexport const reverse = array => array.slice().reverse();\r\n\r\nexport function multiMove(array, indexes, toIndex) {\r\n\r\n    const element = array[toIndex];\r\n    const removedElements = array.filter((_, index) => indexes.includes(index));\r\n    const remainingElements = array.filter((_, index) => !indexes.includes(index));\r\n    const index = remainingElements.indexOf(element);\r\n\r\n    if (index > -1)\r\n        remainingElements.splice(index, 0, ...removedElements);\r\n    else\r\n        remainingElements.push(...removedElements);\r\n\r\n    return remainingElements;\r\n\r\n}\r\n\r\n// export function _multiMove(array, indexes, toIndex) {\r\n//     let result = array.slice();\r\n//     indexes.forEach(removeFrom => { result = move(result, removeFrom, toIndex) });\r\n//     return result;\r\n// }"],"sourceRoot":""}