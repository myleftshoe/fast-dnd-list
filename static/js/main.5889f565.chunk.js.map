{"version":3,"sources":["events.js","Draggable.js","ElementCache.js","TouchSimulator (unused).js","Handler.js","Sortable.js","App.js","index.js","array.js"],"names":["preventDefault","e","transitions","grasp","moveIntoPlace","settleIntoPlace","Draggable","element","props","startPosition","currentPosition","direction","left","offsetLeft","top","offsetTop","height","offsetHeight","width","offsetWidth","_window$getComputedSt","window","getComputedStyle","marginTop","marginBottom","marginLeft","marginRight","initialCenter","dimensions","Math","max","parseInt","displacement","absoluteCenter","this","margins","bottom","right","position","_this$displacement","Object","slicedToArray","x","y","style","transform","concat","hasMoved","willChange","zIndex","transition","classList","add","dragClassName","raised","_element$getBoundingC","getBoundingClientRect","keyframes","animate","duration","easing","finished","target","eventName","event","Promise","resolve","reject","addEventListener","handler","_ref","removeEventListener","requestAnimationFrame","remove","release","_release","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","stop","_x","_x2","apply","arguments","elementCache","elements","staggerDelay","map","Element","get","index","find","indexOf","findIndex","_ref2","count","length","removeAt","splice","resetStyles","forEach","_ref3","selected","getSelected","filter","_ref4","hasSelected","some","_ref5","getSelectedIndexes","selectedIndexes","_ref6","push","print","console","table","item","innerText","translateY","_element$translateY","select","deselect","toggle","Handler","container","draggable","draggableIndex","placeholderIndex","rafId","isHolding","scrollable","parentNode","ElementCache","Array","from","children","scrollableRect","clearTimeout","undefined","setTimeout","move","overflowY","el","document","createEvent","initTouchEvent","_unused","initUIEvent","_unused2","initEvent","touches","clientX","clientY","isDummy","dispatchEvent","touchStartOn","repeatUntilNextTouchMove","_getScrollValue","targetRect","bottomOffset","min","innerHeight","topOffset","maxScrollTop","scrollHeight","clientHeight","offset","round","scrollTop","getScrollValue","_getScrollValue2","scrollOffset","newPositionY","prevPositionY","_draggable","_draggable$absoluteCe","centerY","shift","cancelAnimationFrame","_ref$translateY","prevent","targetY","_elementCache$get","windowScrollY","pageYOffset","documentElement","body","scrollableVisibleTop","indexes","toIndex","Sortable","_useState","useState","_useState2","setHandler","_useState3","_useState4","started","setStarted","_useState5","_useState6","usingTouch","setUsingTouch","containerRef","useRef","start","current","onGrasp","Drag","onDrag","end","result","onDrop","useEffect","log","events","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","react_default","createElement","assign","onPointerDown","pointerType","onContextMenu","className","ref","defaultProps","generateItems","toConsumableArray","keys","k","ReactDOM","render","items","setItems","array","removedElements","_","includes","remainingElements","multiMove","key","getElementById"],"mappings":"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","file":"static/js/main.5889f565.chunk.js","sourcesContent":["export function preventDefault(e) { e.preventDefault() }\r\nexport function stopPropagation(e) { e.stopPropagation() }\r\n\r\nexport function fireAndForget(target, eventName) {\r\n    return new Promise((resolve, reject) => {\r\n        const handler = ({ target }) => {\r\n            target.removeEventListener(eventName, handler, false);\r\n            resolve();\r\n        }\r\n        target.addEventListener(eventName, handler, false);\r\n    })\r\n}\r\n","import './Draggable.css';\r\nimport { fireAndForget } from './events';\r\nimport 'web-animations-js/web-animations.min';\r\n\r\nconst transitions = {\r\n    grasp: 'box-shadow .2s ease-in-out, background-color .2s ease-in-out',\r\n    moveIntoPlace: 'transform .2s ease-in-out',\r\n    settleIntoPlace: 'box-shadow .2s ease-in-out, background-color .2s ease-in-out'\r\n}\r\n\r\nexport default function Draggable(element, props) {\r\n\r\n    let startPosition = null;\r\n    let currentPosition = null;\r\n    let direction = null;\r\n\r\n    const { offsetLeft: left, offsetTop: top, offsetHeight: height, offsetWidth: width } = element;\r\n    const { marginTop, marginBottom, marginLeft, marginRight } = window.getComputedStyle(element);\r\n\r\n    const initialCenter = [left + width / 2, top + height / 2];\r\n    const dimensions = {\r\n        width: width + Math.max(parseInt(marginLeft), parseInt(marginRight)),\r\n        height: height + Math.max(parseInt(marginTop), parseInt(marginBottom)),\r\n    }\r\n\r\n    return {\r\n\r\n        get element() { return element },\r\n\r\n        get direction() { return direction },\r\n\r\n        get displacement() {\r\n            return [\r\n                currentPosition[0] - startPosition[0],\r\n                currentPosition[1] - startPosition[1],\r\n            ]\r\n        },\r\n\r\n        get dimensions() { return dimensions },\r\n\r\n        get absoluteCenter() {\r\n            return [initialCenter[0] + this.displacement[0], initialCenter[1] + this.displacement[1]];\r\n        },\r\n\r\n        get margins() {\r\n            return {\r\n                top: parseInt(marginTop),\r\n                bottom: parseInt(marginBottom),\r\n                left: parseInt(marginLeft),\r\n                right: parseInt(marginRight),\r\n            }\r\n        },\r\n\r\n        set position(position) {\r\n            if (currentPosition) {\r\n                if (position[1] < currentPosition[1])\r\n                    direction = 'up';\r\n                else\r\n                    direction = 'down';\r\n            }\r\n            currentPosition = position;\r\n            if (!startPosition)\r\n                startPosition = currentPosition;\r\n            const [x, y] = this.displacement;\r\n            element.style.transform = `translate(${x}px,${y}px)`;\r\n        },\r\n\r\n        get position() { return currentPosition },\r\n\r\n        get hasMoved() { return startPosition !== currentPosition },\r\n\r\n        grasp() {\r\n            element.style.willChange = 'transform';\r\n            element.style.zIndex = 999;\r\n            // element.style.pointerEvents = 'none';\r\n            element.style.position = 'relative';\r\n            element.style.transition = transitions.grasp;\r\n            element.classList.add(props.dragClassName);\r\n            props.raised && element.classList.add('shadow');\r\n        },\r\n\r\n        moveIntoPlace(x, y) {\r\n            const { left, top } = element.getBoundingClientRect();\r\n            const keyframes = [\r\n                { transform: `translate(${left - x - this.margins.left}px,${top - y}px)` },\r\n                { transform: `translate(${0}px,${0}px)` },\r\n            ];\r\n            const animation = element.animate(keyframes, {\r\n                duration: 200,\r\n                easing: 'ease-in-out',\r\n            });\r\n            return animation.finished;\r\n        },\r\n\r\n        settleIntoPlace() {\r\n            const event = fireAndForget(element, \"transitionend\");\r\n            requestAnimationFrame(() => {\r\n                element.classList.remove(props.dragClassName);\r\n                element.classList.remove('shadow');\r\n                element.style.transition = transitions.settleIntoPlace;\r\n            });\r\n            return event;\r\n        },\r\n\r\n        async release(x, y) {\r\n            await this.moveIntoPlace(x, y);\r\n            element.style.zIndex = null;\r\n            element.style.transform = null;\r\n        }\r\n    }\r\n}\r\n","const transitions = {\r\n    grasp: 'box-shadow .2s ease-in-out, background-color .2s ease-in-out',\r\n    moveIntoPlace: 'transform .2s ease-in-out',\r\n    settleIntoPlace: 'box-shadow 0.4s ease-in-out, background-color 0.4s ease-in-out'\r\n}\r\n\r\n\r\nexport default function elementCache(elements, props) {\r\n\r\n    let staggerDelay = 0.02;\r\n    const elementCache = elements.map(element => {\r\n        // element.classList.add('fadein');\r\n        element.style.transition = transitions.settleIntoPlace;\r\n        // element.style.transitionDelay = `${0.5 + staggerDelay}s`;\r\n        element.classList.remove(props.dragClassName);\r\n        element.classList.remove('shadow');\r\n        element.style.willChange = null;\r\n        staggerDelay += staggerDelay;\r\n        return new Element(element)\r\n    });\r\n\r\n    return {\r\n\r\n        get: index => elementCache[index],\r\n\r\n        find: element => elementCache.find(({ element: cachedElement }) => cachedElement === element),\r\n\r\n        indexOf: element => elementCache.findIndex(({ element: cachedElement }) => cachedElement === element),\r\n\r\n        get count() { return elementCache.length },\r\n\r\n        removeAt(index) { elementCache.splice(index, 1) },\r\n\r\n        resetStyles() {\r\n            elementCache.forEach(({ element, selected }) => {\r\n                if (selected) {\r\n                    element.style.willChange = 'opacity';\r\n                    // element.classList.add('fadein');\r\n                }\r\n                else {\r\n                    element.classList.remove('fadein');\r\n                }\r\n\r\n                element.style.transition = null;\r\n                element.style.transform = null;\r\n            });\r\n        },\r\n\r\n        getSelected: () => elementCache.filter(({ selected }) => selected),\r\n\r\n        get hasSelected() { return elementCache.some(({ selected }) => selected) },\r\n\r\n        // getSelectedIndexes() {\r\n        //     let selectedIndexes = [];\r\n        //     elementCache.forEach(({ element, selected }) => {\r\n        //         const index = elements.indexOf(element);\r\n        //         selected && index > -1 && selectedIndexes.push(index)\r\n        //     });\r\n        //     return selectedIndexes;\r\n        // },\r\n\r\n        getSelectedIndexes() {\r\n            let selectedIndexes = [];\r\n            elementCache.forEach(({ selected }, index) => {\r\n                selected && selectedIndexes.push(index)\r\n            });\r\n            return selectedIndexes;\r\n        },\r\n\r\n        print() {\r\n            console.table(elementCache.map(element => {\r\n                const { element: { innerText: item }, top, translateY } = element;\r\n                return { item, top, translateY }\r\n            }));\r\n        }\r\n    }\r\n\r\n    function Element(element) {\r\n        const { offsetTop, offsetHeight: height, translateY = 0 } = element;\r\n        return {\r\n            element,\r\n            offsetTop,\r\n            height,\r\n            translateY,\r\n            marginTop: element.style.marginTop,\r\n            selected: null,\r\n            get top() { return this.offsetTop + this.translateY },\r\n            select() {\r\n                this.selected = true;\r\n                element.style.transition = transitions.grasp;\r\n                element.classList.add(props.dragClassName);\r\n                props.raised && element.classList.add('shadow');\r\n\r\n            },\r\n            deselect() {\r\n                this.selected = false;\r\n                element.style.transition = transitions.settleIntoPlace;\r\n                element.classList.remove(props.dragClassName);\r\n                element.classList.remove('shadow');\r\n\r\n            },\r\n            toggle() {\r\n                if (this.selected)\r\n                    this.deselect();\r\n                else\r\n                    this.select();\r\n            }\r\n        }\r\n    }\r\n}\r\n","export const touchStartOn = (el, x = 0, y = 0) => {\r\n    let e;\r\n    try {\r\n        e = document.createEvent('TouchEvent')\r\n        e.initTouchEvent(\"touchstart\", true, true)\r\n    }\r\n    catch {\r\n        try {\r\n            e = document.createEvent('UIEvent')\r\n            e.initUIEvent(\"touchstart\", true, true)\r\n        }\r\n        catch {\r\n            e = document.createEvent('Event')\r\n            e.initEvent(\"touchstart\", true, true)\r\n        }\r\n    }\r\n    e.touches = [{\r\n        clientX: x,\r\n        clientY: y\r\n    }];\r\n    // e.prototype.addProperty()\r\n    e.isDummy = true;\r\n    el.dispatchEvent(e)\r\n}\r\n\r\nexport const touchEndOn = (el, x = 0, y = 0) => {\r\n    let e;\r\n    try {\r\n        e = document.createEvent('TouchEvent')\r\n        e.initTouchEvent(\"touchend\", true, true)\r\n    }\r\n    catch {\r\n        try {\r\n            e = document.createEvent('UIEvent')\r\n            e.initUIEvent(\"touchend\", true, true)\r\n        }\r\n        catch {\r\n            e = document.createEvent('Event')\r\n            e.initEvent(\"touchend\", true, true)\r\n        }\r\n    }\r\n    e.touches = [{\r\n        clientX: x,\r\n        clientY: y\r\n    }];\r\n    e.isDummy = true;\r\n    el.dispatchEvent(e)\r\n}","import Draggable from './Draggable';\r\nimport ElementCache from './ElementCache';\r\nimport { preventDefault } from './events';\r\nimport { touchStartOn } from './TouchSimulator (unused)';\r\n\r\nexport default function (container, props) {\r\n\r\n    const scrollable = container.parentNode;\r\n    let draggable;\r\n    let draggableIndex;\r\n    let placeholderIndex;\r\n    const children = Array.from(container.children);\r\n    let elementCache = new ElementCache(children, props);\r\n    let rafId;\r\n    let isHolding;\r\n\r\n    const scrollableRect = scrollable.getBoundingClientRect();\r\n\r\n    const scrollableVisibleTop = function () {\r\n        const windowScrollY = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\r\n        return container.offsetTop - windowScrollY - scrollable.scrollTop\r\n    }\r\n\r\n    return {\r\n\r\n        grasp(element) {\r\n\r\n            if (element === container) return;\r\n\r\n            if (!elementCache.hasSelected) {\r\n                isHolding = setTimeout(() => {\r\n                    isHolding = undefined;\r\n                    elementCache.find(element).toggle();\r\n                    draggable = undefined;\r\n                }, 300);\r\n                return;\r\n            }\r\n            else {\r\n                clearTimeout(isHolding);\r\n                elementCache.find(element).toggle();\r\n                draggable = undefined;\r\n                return;\r\n            }\r\n        },\r\n\r\n        move(element, x, y) {\r\n\r\n            if (element === container || element === scrollable) return;\r\n            if (isHolding) {\r\n                clearTimeout(isHolding);\r\n                return;\r\n            }\r\n\r\n            if (!draggable) {\r\n                draggable = new Draggable(element, props);\r\n\r\n                draggableIndex = elementCache.indexOf(draggable.element);\r\n                placeholderIndex = draggableIndex;\r\n\r\n                elementCache.get(draggableIndex).select();\r\n                // elementCache.removeAt(draggableIndex);\r\n\r\n                disableScrolling();\r\n                setTimeout(() => touchStartOn(draggable.element, x, y), 0);\r\n                draggable.grasp();\r\n            }\r\n            // if (prevent()) return;\r\n\r\n            rafId = requestAnimationFrame(repeatUntilNextTouchMove);\r\n            let prevPositionY = null;\r\n            // Allows auto scroll to continue when draggable is held in same place\r\n            function repeatUntilNextTouchMove() {\r\n\r\n                if (!draggable) return;\r\n                const [scrollTop, scrollOffset] = getScrollValue();\r\n                const newPositionY = y + scrollTop;\r\n\r\n                if (newPositionY === prevPositionY) return;\r\n\r\n                scrollable.scrollTop = scrollTop;\r\n                draggable.position = [x, newPositionY];\r\n                prevPositionY = newPositionY;\r\n\r\n                const { direction, dimensions: { height }, absoluteCenter: [, centerY] } = draggable;\r\n\r\n                if (direction === 'down') {\r\n                    for (placeholderIndex; placeholderIndex < elementCache.count; placeholderIndex++) {\r\n                        const element = elementCache.get(placeholderIndex);\r\n                        if (element.element === draggable.element) continue;\r\n                        if (element.top > centerY) break;\r\n                        element.translateY -= height;\r\n                        shift(element);\r\n                    }\r\n                }\r\n                else if (direction === 'up') {\r\n                    for (placeholderIndex; placeholderIndex > 0; placeholderIndex--) {\r\n                        const element = elementCache.get(placeholderIndex - 1);\r\n                        if (element.element === draggable.element) continue;\r\n                        const bottom = element.top + element.height;\r\n                        if (bottom < centerY) break;\r\n                        element.translateY += height;\r\n                        shift(element);\r\n                    }\r\n                }\r\n                if (placeholderIndex <= 0 || placeholderIndex >= elementCache.count || scrollOffset === 0) {\r\n                    cancelAnimationFrame(rafId);\r\n                }\r\n                else {\r\n                    rafId = requestAnimationFrame(repeatUntilNextTouchMove);\r\n                }\r\n\r\n            }\r\n\r\n            function shift({ element, translateY = 0 }) {\r\n                // element.style.willChange = 'transform';\r\n                // requestAnimationFrame(() => {\r\n                element.style['transition'] = 'transform .2s ease-in-out';\r\n                element.style['transform'] = `translateY(${translateY}px)`;\r\n                //     element.style.willChange = null;\r\n                // });\r\n            }\r\n\r\n        },\r\n\r\n        release() {\r\n\r\n            if (prevent()) return null;\r\n\r\n            enableScrolling();\r\n\r\n            let targetY;\r\n            if (placeholderIndex < elementCache.count) {\r\n                targetY = elementCache.get(placeholderIndex).top;\r\n            }\r\n            else {\r\n                const { offsetTop, height } = elementCache.get(placeholderIndex - 1);\r\n                targetY = offsetTop + draggable.margins.top + height;\r\n            }\r\n\r\n            targetY = targetY - draggable.dimensions.height + scrollableVisibleTop();\r\n\r\n            let selectedIndexes = elementCache.getSelectedIndexes();\r\n\r\n\r\n            try { return { indexes: selectedIndexes, toIndex: placeholderIndex } }\r\n\r\n            // Do the drop animation after reordering\r\n            finally {\r\n\r\n                // finalize();\r\n\r\n                // async function finalize() {\r\n                draggable.release(0, targetY);\r\n                elementCache.resetStyles();\r\n                draggable = undefined;\r\n                // }\r\n            }\r\n\r\n        },\r\n    }\r\n\r\n    function disableScrolling() {\r\n        scrollable.style.overflowY = 'hidden';\r\n        // scrollable.style.touchAction = 'none';\r\n        // scrollable.addEventListener('touchmove', preventDefault);\r\n    }\r\n\r\n    function enableScrolling() {\r\n        scrollable.style.overflowY = 'scroll';\r\n        // scrollable.style.touchAction = 'pan-y';\r\n        // scrollable.removeEventListener('touchmove', preventDefault);\r\n    }\r\n\r\n    function prevent() {\r\n\r\n        if (isHolding) {\r\n            clearTimeout(isHolding);\r\n            isHolding = undefined;\r\n            draggable = undefined;\r\n        }\r\n\r\n        if (!draggable) return true;\r\n\r\n        cancelAnimationFrame(rafId);\r\n\r\n        return false;\r\n    }\r\n\r\n    function getScrollValue() {\r\n\r\n        const triggerOffset = 80;\r\n        const speedMultiplier = 0.125;\r\n\r\n        // const scrollableRect = scrollable.getBoundingClientRect();\r\n        const targetRect = draggable.element.getBoundingClientRect();\r\n        const bottomOffset = Math.min(scrollableRect.bottom, window.innerHeight) - targetRect.bottom;\r\n        const topOffset = targetRect.top - Math.max(scrollableRect.top, 0);\r\n        const maxScrollTop = scrollable.scrollHeight - Math.min(scrollable.clientHeight, window.innerHeight);\r\n\r\n        let offset = 0;\r\n        if (bottomOffset < triggerOffset)\r\n            offset = Math.min(triggerOffset, triggerOffset - bottomOffset);\r\n        else if (topOffset < triggerOffset)\r\n            offset = Math.max(-triggerOffset, topOffset - triggerOffset);\r\n\r\n        const top = Math.max(0, Math.min(maxScrollTop, Math.round(scrollable.scrollTop + offset * speedMultiplier)));\r\n\r\n        return [top, offset];\r\n    }\r\n\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Handler from './Handler';\r\nimport { preventDefault } from './events';\r\n\r\n//------------------------------------------------------------------------------\r\n\r\nexport default function Sortable(props) {\r\n\r\n    let [handler, setHandler] = useState();\r\n    let [started, setStarted] = useState(false);\r\n    let [usingTouch, setUsingTouch] = useState(true);\r\n\r\n    const containerRef = useRef();\r\n\r\n    useEffect(() => {\r\n        console.log('new Handler!!');\r\n        setHandler(new Handler(containerRef.current, props));\r\n    }, [props.children]);\r\n\r\n    useEffect(() => {\r\n        if (!usingTouch && started)\r\n            document.body.addEventListener(\"mousemove\", move);\r\n        else\r\n            document.body.removeEventListener(\"mousemove\", move);\r\n        return () => {\r\n            document.body.removeEventListener(\"mousemove\", move);\r\n        };\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (usingTouch && started)\r\n            document.body.addEventListener(\"touchmove\", move);\r\n        else\r\n            document.body.removeEventListener(\"touchmove\", move);\r\n        return () => {\r\n            document.body.removeEventListener(\"touchmove\", move);\r\n        };\r\n    });\r\n\r\n    function handlePointerDown(e) {\r\n        if (e.pointerType === 'touch')\r\n            setUsingTouch(true);\r\n        else\r\n            setUsingTouch(false);\r\n    }\r\n\r\n    function start(e) {\r\n        setStarted(true);\r\n        if (e.target.parentNode !== containerRef.current) return;\r\n        handler.grasp(e.target);\r\n        props.onGrasp && props.onGrasp();\r\n    }\r\n\r\n    function move(e) {\r\n        if (usingTouch)\r\n            handler.move(e.target, e.touches[0].clientX, e.touches[0].clientY);\r\n        else\r\n            handler.move(e.target, e.clientX, e.clientY);\r\n\r\n        props.Drag && props.onDrag();\r\n    }\r\n\r\n    function end(e) {\r\n        const result = handler.release();\r\n        setStarted(false);\r\n        result && props.onDrop && props.onDrop(result);\r\n    }\r\n\r\n    let events = {};\r\n\r\n    if (handler) {\r\n        if (usingTouch) events = {\r\n            onTouchStart: start,\r\n            // onTouchMove: move,\r\n            onTouchEnd: end,\r\n        }\r\n        else events = {\r\n            onMouseDown: start,\r\n            // onMouseMove: started ? move : null,\r\n            onMouseUp: end,\r\n            // onMouseLeave:  end,\r\n        }\r\n    }\r\n\r\n    return (\r\n        //\r\n        // Notes:\r\n        //\r\n        // 1. The draggable is positioned relatively. In order for it to not be cut-off when dragged\r\n        // beyond the container edges requires overflow-x: visible on the container. But it's not\r\n        // possible to have overflow visible on one axis and allow the other axis to scroll: the\r\n        // visible axis will be overidden with overflow: auto (google it!).\r\n        // The solution is to wrap the container with overflow-x: visible in a scrollable div as\r\n        // below.\r\n        // Positioning the draggable absolutely allows it to remain visible no matter where it is\r\n        // but will close the placeholder when grasped. It also requires its size to be tweaked\r\n        // on grasp as it loses its container padding.\r\n        //\r\n        // 2. The event listeners are attached to the wrapper (not the container) as the mousemove\r\n        // events do not fire when the draggable is outside the container (and dragged fast so that\r\n        // the mouse leaves the draggable). I.e. the draggable freezes until the mouse is moved over\r\n        // it again. The container fits the list contenet snuggly whereas the wrapper is the full width\r\n        // of the page -> events on the wrapper continue to fire.\r\n        // Update: Now adds mousemove listener to the document so others can go either on container or\r\n        // wrapper. Leave on wrapper for now.\r\n\r\n        <div style={{ overflowY: 'scroll' }}\r\n            onPointerDown={handlePointerDown}\r\n            {...events}\r\n            onContextMenu={preventDefault}\r\n        >\r\n            <div className='container' ref={containerRef}>\r\n                {props.children}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n\r\nSortable.propTypes = {\r\n    onGrasp: PropTypes.func,\r\n    onDrag: PropTypes.func,\r\n    onDrop: PropTypes.func,\r\n    raised: PropTypes.bool,\r\n    dragClassName: PropTypes.string,\r\n}\r\n\r\nSortable.defaultProps = {\r\n    raised: true,\r\n    dragClassName: 'drag-style',\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Sortable from './Sortable';\r\nimport { multiMove } from './array';\r\n\r\nconst generateItems = length => [...Array(length).keys()].map(k => `Item ${k}`)\r\n\r\nexport default function App() {\r\n\r\n    let [items, setItems] = useState(generateItems(18));\r\n\r\n    const onDrop = ({ indexes, toIndex }) => setItems(multiMove(items, indexes, toIndex));\r\n\r\n    return <div className='list'>\r\n        <Sortable dragClassName='drag-style' onDrop={onDrop}>\r\n            {items.map(item =>\r\n                <div key={item} className='list-item' style={{ height: item === 'Item 2' ? '70px' : item === 'Item 4' && '100px' }}>{item}</div>)\r\n            }\r\n        </Sortable>\r\n    </div>\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","export const move = (array, removeFrom = null, insertAt = null) => {\r\n\r\n    // Adds item if removeFrom is null\r\n    // Removes item if insertAt is null\r\n\r\n    if (insertAt === removeFrom) return array;\r\n    if (isNaN(Number(removeFrom) || isNaN(Number(insertAt)))) return array;\r\n\r\n    let _array = [...array];\r\n\r\n    const item = (removeFrom !== null) ? _array.splice(removeFrom, 1)[0] : null;\r\n    if (insertAt !== null) {\r\n        _array.splice(insertAt, 0, item);\r\n    }\r\n\r\n    return _array;\r\n};\r\n\r\nexport const shuffle = array => array\r\n    .map(a => [Math.random(), a])\r\n    .sort((a, b) => a[0] - b[0])\r\n    .map(a => a[1]);\r\n\r\nexport const reverse = array => array.slice().reverse();\r\n\r\nexport function multiMove(array, indexes, toIndex) {\r\n\r\n    const element = array[toIndex];\r\n    const removedElements = array.filter((_, index) => indexes.includes(index));\r\n    const remainingElements = array.filter((_, index) => !indexes.includes(index));\r\n    const index = remainingElements.indexOf(element);\r\n\r\n    if (index > -1)\r\n        remainingElements.splice(index, 0, ...removedElements);\r\n    else\r\n        remainingElements.push(...removedElements);\r\n\r\n    return remainingElements;\r\n\r\n}\r\n\r\n// export function _multiMove(array, indexes, toIndex) {\r\n//     let result = array.slice();\r\n//     indexes.forEach(removeFrom => { result = move(result, removeFrom, toIndex) });\r\n//     return result;\r\n// }"],"sourceRoot":""}